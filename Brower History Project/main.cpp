#include <iostream>
#include <fstream>
#include <list>
#include <string>
#include <stdexcept>

#include "Webpage.h"
#include "BrowserHistory.h"

using namespace std;

////////////////////////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE (except for your own testing)
// CODE WILL BE GRADED USING A MAIN FUNCTION SIMILAR TO THIS
////////////////////////////////////////////////////////////////////////////////

static int testCount = 0;

template <typename T>
bool testAnswer(const string &nameOfTest, const T& received, const T& expected);


int main() {
    // Test only Webpage class
    Webpage testPage01("http://www.google.com", 1506134400);
    testAnswer("Webpage01.getUrl() test", testPage01.getUrl(), string("http://www.google.com"));
    testAnswer("Webpage01.getTime() test", testPage01.getTime(), time_t(1506134400));

    Webpage testPage02("http://twitter.com", 1506134420);
    testAnswer("Webpage02.getUrl() test", testPage02.getUrl(), string("http://twitter.com"));
    testAnswer("Webpage02.getTime() test", testPage02.getTime(), time_t(1506134420));

    Webpage testPage03("http://stackoverflow.com", 1506134440);
    testAnswer("Webpage03.getUrl() test", testPage03.getUrl(), string("http://stackoverflow.com"));
    testAnswer("Webpage03.getTime() test", testPage03.getTime(), time_t(1506134440));


    // Test BrowserHistory class
    BrowserHistory testHistory;

    // Expect the next test to fail
    string nameOfTest = "BrowserHistory.getUrl() empty history";
    try {
        testAnswer(nameOfTest, testHistory.getUrl(), string("http://www.bing.com"));
        cout << "FAILED " << nameOfTest << ": expected to recieve an error but didn't" << endl;
    } catch (const logic_error& e) {
        cout << "PASSED " << nameOfTest << ": expected and received error " << e.what() << endl;
        testCount++;
    }

    testHistory.visitSite(testPage01);
    testAnswer("BrowserHistory.getNavSize()", testHistory.getNavSize(), size_t(1));
    testAnswer("BrowserHistory.getUrl()", testHistory.getUrl(), string("http://www.google.com"));

    testHistory.visitSite(testPage02);
    testAnswer("BrowserHistory.getNavSize()", testHistory.getNavSize(), size_t(2));
    testAnswer("BrowserHistory.getUrl()", testHistory.getUrl(), string("http://twitter.com"));

    // Test BrowserHistory navigation
    testAnswer("BrowserHistory.back()", testHistory.back(), string("http://www.google.com"));
    testAnswer("BrowserHistory.getUrl()", testHistory.getUrl(), string("http://www.google.com"));
    testAnswer("BrowserHistory.forward()", testHistory.forward(), string("http://twitter.com"));
    testHistory.back();
    testHistory.visitSite(testPage03);
    testAnswer("BrowserHistory.getNavSize()", testHistory.getNavSize(), size_t(2));
    testAnswer("BrowserHistory.getUrl()", testHistory.getUrl(), string("http://stackoverflow.com"));


    // Test BrowserHistory reading from a file
    BrowserHistory desktop;
    desktop.readHistory("desktop.txt");
    testAnswer("BrowserHistory.getNavSize()", desktop.getNavSize(), size_t(3));
    testAnswer("BrowserHistory.getUrl()", desktop.getUrl(),
                string("https://en.wikipedia.org/wiki/International_Space_Station"));

    desktop.readHistory("mobile.txt");
    testAnswer("BrowserHistory.getNavSize()", desktop.getNavSize(), size_t(7));
    testAnswer("BrowserHistory.getUrl()", desktop.getUrl(), string("http://www.binomial.info/"));

    // Test Back and Forward Again
    testAnswer("BrowserHistory.back() 02", desktop.back(), string("https://twitter.com/sehulrburt"));
    desktop.forward();
    testAnswer("BrowserHistory.forward() 02", desktop.forward(), string("https://sites.google.com/site/richgel99/"));
    desktop.back();

    // Test BrowserHistory full history
    string expected[] = {
        "https://en.wikipedia.org/",
        "https://en.wikipedia.org/wiki/NASA",
        "https://en.wikipedia.org/wiki/Neil_Armstrong",
        "https://en.wikipedia.org/wiki/Apollo_11",
        "https://en.wikipedia.org/wiki/International_Space_Station",
        "https://twitter.com/",
        "https://twitter.com/sehulrburt",
        "http://stephaniehurlburt.com/",
        "http://www.binomial.info/",
        "https://sites.google.com/site/richgel99/"
    };
    int i = 0;
    for(auto site : desktop.getSitesVisited()) {
        testAnswer("BrowserHistor full history " + to_string(i), site.getUrl(), expected[i]);
        i++;
    }

    cout << endl << testCount << " tests passed out of 32 total tests" << endl;

    return 0;
}

template <typename T>
bool testAnswer(const string &nameOfTest, const T& received, const T& expected) {
    if (received == expected) {
        cout << "PASSED " << nameOfTest << ": expected and received " << received << endl;
        testCount++;
        return true;
    }
    cout << "FAILED " << nameOfTest << ": expected " << expected << " but received " << received << endl;
    return false;
}
