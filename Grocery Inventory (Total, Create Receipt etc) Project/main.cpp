#include	<cmath>
#include	<iostream>
#include	<string>
#include	<vector>

#include "GroceryCheckout.h"

using namespace std;

///////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE (except for your own testing)       //
// CODE WILL BE GRADED USING A MAIN FUNCTION SIMILAR TO THIS //
///////////////////////////////////////////////////////////////
float		Difference(float f1, float f2);

uint64_t	TestAddItem();

uint64_t	TestCreateInventory(GroceryInventory& inventory);

uint64_t	TestCreateReceipt(GroceryInventory& inventory);

uint64_t	TestFindItem();

uint64_t	TestRemoveItem();

bool 		VerifyQuantities(GroceryInventory& inventory);

bool 		VerifyReceipt(Receipt& actualReceipt);

//********************************************************************************
int main(int argc, char * const argv[])
{
	uint64_t			finalScore;
	GroceryInventory	inventory;
	uint64_t			score;
 
	finalScore = 0;
	
	score = TestAddItem();
	finalScore += score;
	
	score = TestFindItem();
	finalScore += score;
	
	score = TestRemoveItem();
	finalScore += score;
	
	score = TestCreateInventory(inventory);
	finalScore += score;
	
	score = TestCreateReceipt(inventory);
	finalScore += score;

	cout << endl << "Score: " << finalScore << endl;
    return 0;
}


//********************************************************************************
float Difference(float f1, float f2)
{
	return(fabs(f1 - f2));
}

//********************************************************************************
uint64_t	TestAddItem()
{
	GroceryInventory	inventory;
	uint64_t			score;
	bool				success;
	
	score = 8;
	success = inventory.AddItem("one", 1, 1.0, 0);
	if (!success)
	{
		score = 0;
	}
	success = inventory.AddItem("two", 1, 1.0, 0);
	if (!success)
	{
		score = 0;
	}
	success = inventory.AddItem("three", 1, 1.0, 0);
	if (!success)
	{
		score = 0;
	}

	if (score == 8)
	{
		cout << "PASSED: GroceryInventory::AddItem, 8 points." << endl;
	}
	else
	{
		cout << "FAILED: GroceryInventory::AddItem." << endl;
	}
	success = inventory.AddItem("two", 1, 1.0, 0);
	if (!success)
	{
		cout << "PASSED: GroceryInventory::AddItem, duplicate detected as expected, 8 points" << endl;
		score += 8;
	}
	else
	{
		cout << "FAILED: GroceryInventory::AddItem, duplicate not detected but should have been." << endl;
	}
	
	return(score);
}

//********************************************************************************
uint64_t	TestCreateInventory(GroceryInventory& inventory)
{
	ifstream		file("Shipment.txt");
	GroceryItem*	itemPtr;
	string			name;
	bool			pass;
	float			price;
	uint64_t		quantity;
	uint64_t		score;
	uint64_t		size;
	uint64_t		taxable;

	inventory.CreateFromFile("Shipment.txt");
	inventory.SetTaxRate(7.75);
	
	pass = true;
	size = 0;
	while (true)
	{
		file >> name >> quantity >> price >> taxable;
		if (file.fail())
		{
			break;
		}
		++size;
		itemPtr = inventory.FindItem(name);
		if (itemPtr == nullptr)
		{
			cout << "FAILED: GroceryInventory::CreateFromFile missing item: " << name << endl;
			pass = false;
			break;
		}
		if (itemPtr->quantity_ != quantity)
		{
			cout << "FAILED: GroceryInventory::CreateFromFile wrong quantity for " << name << endl;
			pass = false;
			break;
		}
		if (itemPtr->price_ != price)
		{
			cout << "FAILED: GroceryInventory::CreateFromFile wrong price for" << name << endl;
			pass = false;
			break;
		}
		if (itemPtr->taxable_ != taxable)
		{
			cout << "FAILED: GroceryInventory::CreateFromFile wrong taxable for" << name << endl;
			pass = false;
			break;
		}
	}

	score = 0.0;
	if (pass)
	{
		if (size == inventory.Size())
		{
			score = 12;
			cout << "PASSED: GroceryInventory::CreateFromFile actual matches expected. "
				<< score << " points." << endl;
		}
		else
		{
			cout << "FAILED: GroceryInventory::CreateFromFile actual size doesn't match expected." << endl;
		}
	}

	return(score);
}

//********************************************************************************
uint64_t	TestCreateReceipt(GroceryInventory& inventory)
{
	Receipt		actualReceipt;
	uint64_t	finalScore;
	uint64_t	score;
	bool		success;

	actualReceipt = inventory.CreateReceipt("Checkout.txt");
	
	finalScore = 0;
	success = VerifyReceipt(actualReceipt);
	if (success)
	{
		score = 15;
		cout << endl << "PASSED: Receipt::CreateFromFile, actual matches expected, "
			<< score << " points." << endl;
		finalScore += score;
	}
	else
	{
		cout << endl << "FAILED: Receipt::CreateFromFile, actual doesn't match expected." << endl;
	}

	success = VerifyQuantities(inventory);
	if (success)
	{
		score = 5;
		cout << endl << "PASSED: Receipt::CreateFromFile, actual inventory quantities match expected, "
			<< score << " points." << endl;
		finalScore += score;
	}
	else
	{
		cout << endl << "FAILED: Receipt::CreateFromFile, actual inventory quantities don't match expected." << endl;
	}

	return(finalScore);
}

//********************************************************************************
uint64_t	TestFindItem()
{
	GroceryInventory	inventory;
	GroceryItem*		itemPtr;
	uint64_t			score = 0;
	
	inventory.AddItem("one", 1, 1.0, 0);
	inventory.AddItem("two", 1, 1.0, 0);
	inventory.AddItem("three", 1, 1.0, 0);

	itemPtr = inventory.FindItem("two");
	if (itemPtr != nullptr)
	{
		cout << "PASSED: GroceryInventory::FindItem, existing item found, 8 points" << endl;
		score += 8;
	}
	else
	{
		cout << "FAILED: GroceryInventory::FindItem, existing item not found." << endl;
	}

	itemPtr = inventory.FindItem("four");
	if (itemPtr == nullptr)
	{
		cout << "PASSED: GroceryInventory::FindItem, nonexistent item not found, 8 points" << endl;
		score += 8;
	}
	else
	{
		cout << "FAILED: GroceryInventory::FindItem, nonexistent item found but shouldn't have been." << endl;
	}

	return(score);
}

//********************************************************************************
uint64_t	TestRemoveItem()
{
	GroceryInventory	inventory;
	GroceryItem*		itemPtr;
	uint64_t			score;
	bool				success;
	
	success = inventory.AddItem("one", 1, 1.0, 0);
	success = inventory.AddItem("two", 1, 1.0, 0);
	success = inventory.AddItem("three", 1, 1.0, 0);
	
	score = 0.0;
	success = inventory.RemoveItem("two");
	if (success)
	{
		itemPtr = inventory.FindItem("two");
		if (itemPtr == nullptr)
		{
			cout << "PASSED: GroceryInventory::RemoveItem, existing item removed, 8 points" << endl;
			score += 8;
		}
		else
		{
			success = false;
		}
	}
	if (!success)
	{
		cout << "FAILED: GroceryInventory::RemoveItem, item not removed." << endl;
	}
	
	success = inventory.RemoveItem("four");
	if (!success)
	{
		cout << "PASSED: GroceryInventory::RemoveItem, nonexistent item not removed, 8 points" << endl;
		score += 8;
	}
	else
	{
		cout << "FAILED: GroceryInventory::RemoveItem, nonexistent item removed but shouldn't have been." << endl;
	}
	return(score);
}

//********************************************************************************
bool VerifyQuantities(GroceryInventory& inventory)
{
	struct	QuantityItem
	{
		QuantityItem(const string& name, uint64_t quantity)
		: name_(name), quantity_(quantity) { }
		string		name_;
		
		uint64_t	quantity_;
	};
	
	vector<QuantityItem>	quantityVector =
	{
		{ "Salad_Dressing", 8903 },
		{ "Oat_Meal", 215 },
		{ "Potatoes_Russet_", 7416 },
		{ "Ribs_Spare_Back_(pork_unseasoned)", 5082 },
		{ "Cheese_shredded_Mozarella", 6147 },
		{ "Brats_4-6_pack", 4628 },
		{ "Water_regular/drinking", 7110 },
		{ "Pretzels", 245 },
		{ "Pears", 1509 },
		{ "Paper_Towels", 927 },
		{ "Syrup_breakfast", 5871 }
	};

	GroceryItem*	itemPtr;
	
	bool			success = true;
	
	for (uint64_t i = 0; i < quantityVector.size(); ++i)
	{
		itemPtr = inventory.FindItem(quantityVector[i].name_);
		if (itemPtr != nullptr)
		{
			if (itemPtr->quantity_ != quantityVector[i].quantity_)
			{
				success = false;
			}
		}
		else
		{
			success = false;
		}
	}
	
	return(success);
}

//********************************************************************************
bool VerifyReceipt(Receipt& actualReceipt)
{
	vector<ReceiptItem>	item =
	{
		{ "Salad_Dressing", 1.39 },
		{ "Oat_Meal", 1.49 },
		{ "Potatoes_Russet_", 2.89 },
		{ "Ribs_Spare_Back_(pork_unseasoned)", 3.99 },
		{ "Cheese_shredded_Mozarella", 2.99 },
		{ "Brats_4-6_pack", 1.99 },
		{ "Water_regular/drinking", 2.49 },
		{ "Pretzels", 1.29 },
		{ "Pears", 1.99 },
		{ "Paper_Towels", 5.99 },
		{ "Syrup_breakfast", 1.59 }
	};

	float	subtotal = 28.09;
	float	taxAmount = 0.46;
	float	total = 28.55;
	
	if (actualReceipt.item_.size() != item.size())
	{
		return(false);
	}
	for (size_t i = 0; i < actualReceipt.item_.size(); ++i)
	{
		if (actualReceipt.item_[i].name_ != item[i].name_)
		{
			return(false);
		}
		if (actualReceipt.item_[i].price_ != item[i].price_)
		{
			return(false);
		}
	}
	if (Difference(actualReceipt.subtotal_, subtotal) > 0.01)
	{
		return(false);
	}
	if (Difference(actualReceipt.taxAmount_, taxAmount) > 0.01)
	{
		return(false);
	}
	if (Difference(actualReceipt.total_, total) > 0.01)
	{
		return(false);
	}
	return(true);
}
